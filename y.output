   0  $accept : program $end

   1  program : first_func_def extdefs
   2          | extdefs_no_func first_func_def extdefs
   3          | first_func_def
   4          | extdefs_no_func first_func_def

   5  var : IDEN indexs
   6      | IDEN

   7  extdefs_no_func : extdefs_no_func extdef_no_func
   8                  | extdef_no_func

   9  extdef_no_func : type IDEN '(' para_in ')' ';'
  10                 | VOID IDEN '(' para_in ')' ';'
  11                 | type iden_list_init ';'
  12                 | CONST type const_iden_list ';'

  13  iden_list_init : iden_list_init ',' IDEN
  14                 | iden_list_init ',' IDEN init
  15                 | iden_list_init ',' IDEN indexs_dec array_init
  16                 | iden_list_init ',' IDEN indexs_dec
  17                 | IDEN init
  18                 | IDEN
  19                 | IDEN indexs_dec array_init
  20                 | IDEN indexs_dec

  21  const_iden_list : const_iden_list ',' IDEN const_init
  22                  | IDEN const_init

  23  const_init : '=' literal

  24  extdefs : extdefs extdef
  25          | extdef

  26  extdef : type IDEN '(' para_in ')' ';'
  27         | VOID IDEN '(' para_in ')' ';'
  28         | func_def
  29         | type iden_list_init ';'
  30         | CONST type const_iden_list ';'

  31  decs_x :
  32         | decs

  33  decs : decs dec
  34       | dec

  35  dec : type iden_list_init ';'
  36      | CONST type const_iden_list ';'

  37  expr_x :
  38         | expr

  39  expr : literal
  40       | var
  41       | var PLUSPLUS
  42       | var MINUSMINUS
  43       | IDEN '(' exprs_comma_x ')'
  44       | expr '+' expr
  45       | expr '-' expr
  46       | expr '*' expr
  47       | expr '/' expr
  48       | expr '%' expr
  49       | expr '>' expr
  50       | expr '<' expr
  51       | expr GE expr
  52       | expr LE expr
  53       | expr EQUAL expr
  54       | expr NOTEQUAL expr
  55       | NOT expr
  56       | expr ANDAND expr
  57       | expr OROR expr
  58       | '-' expr
  59       | '(' expr ')'

  60  expr_no_invoke : literal
  61                 | var
  62                 | var PLUSPLUS
  63                 | var MINUSMINUS
  64                 | expr_no_invoke '+' expr_no_invoke
  65                 | expr_no_invoke '-' expr_no_invoke
  66                 | expr_no_invoke '*' expr_no_invoke
  67                 | expr_no_invoke '/' expr_no_invoke
  68                 | expr_no_invoke '%' expr_no_invoke
  69                 | expr_no_invoke '>' expr_no_invoke
  70                 | expr_no_invoke '<' expr_no_invoke
  71                 | expr_no_invoke GE expr_no_invoke
  72                 | expr_no_invoke LE expr_no_invoke
  73                 | expr_no_invoke EQUAL expr_no_invoke
  74                 | expr_no_invoke NOTEQUAL expr_no_invoke
  75                 | NOT expr_no_invoke
  76                 | expr_no_invoke ANDAND expr_no_invoke
  77                 | expr_no_invoke OROR expr_no_invoke
  78                 | '-' expr_no_invoke
  79                 | '(' expr_no_invoke ')'

  80  stmts_x :
  81          | stmts

  82  stmts : stmts stmt
  83        | stmt

  84  stmt : var '=' expr ';'
  85       | if_stmt
  86       | while_stmt
  87       | switch_stmt
  88       | for_stmt
  89       | IDEN '(' exprs_comma_x ')' ';'
  90       | RETURN expr ';'
  91       | BREAK ';'
  92       | CONTINUE ';'

  93  if_stmt : IF '(' expr ')' compound ELSE compound
  94          | IF '(' expr ')' compound

  95  while_stmt : WHILE '(' expr ')' compound
  96             | DO compound WHILE '(' expr ')' ';'

  97  for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' compound

  98  switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}'

  99  cases : cases case
 100        | case

 101  case : CASE CHAR_LIT ':' stmts_x
 102       | CASE INT_LIT ':' stmts_x

 103  default_x :
 104            | DEFAULT ':' stmts_x

 105  first_func_def : type IDEN '(' para_in ')' compound
 106                 | VOID IDEN '(' para_in ')' compound

 107  func_def : type IDEN '(' para_in ')' compound
 108           | VOID IDEN '(' para_in ')' compound

 109  compound : '{' decs_x stmts_x '}'

 110  exprs_comma_x :
 111                | exprs_comma

 112  exprs_comma : exprs_comma ',' expr
 113              | expr

 114  exprs_comma_no_invoke_x :
 115                          | exprs_comma_no_invoke

 116  exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke
 117                        | expr_no_invoke

 118  init : '=' expr_no_invoke

 119  array_init : '=' '{' exprs_comma_no_invoke_x '}'

 120  para_in :
 121          | paras

 122  paras : paras ',' para
 123        | para

 124  para : type IDEN indexs_dec
 125       | type IDEN

 126  indexs_dec : indexs_dec index_dec
 127             | index_dec

 128  index_dec : '[' INT_LIT ']'

 129  indexs : indexs index
 130         | index

 131  index : '[' expr ']'

 132  type : INT
 133       | DOUBLE
 134       | CHAR
 135       | BOOL

 136  literal : CHAR_LIT
 137          | INT_LIT
 138          | DOUBLE_LIT
 139          | BOOL_LIT
 140          | STRING_LIT

state 0
	$accept : . program $end  (0)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	program  goto 7
	first_func_def  goto 8
	extdefs_no_func  goto 9
	extdef_no_func  goto 10
	type  goto 11


state 1
	type : INT .  (132)

	.  reduce 132


state 2
	type : DOUBLE .  (133)

	.  reduce 133


state 3
	type : BOOL .  (135)

	.  reduce 135


state 4
	type : CHAR .  (134)

	.  reduce 134


state 5
	extdef_no_func : VOID . IDEN '(' para_in ')' ';'  (10)
	first_func_def : VOID . IDEN '(' para_in ')' compound  (106)

	IDEN  shift 12
	.  error


state 6
	extdef_no_func : CONST . type const_iden_list ';'  (12)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 13


state 7
	$accept : program . $end  (0)

	$end  accept


state 8
	program : first_func_def . extdefs  (1)
	program : first_func_def .  (3)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 14
	CONST  shift 15
	$end  reduce 3

	extdefs  goto 16
	type  goto 17
	extdef  goto 18
	func_def  goto 19


state 9
	program : extdefs_no_func . first_func_def extdefs  (2)
	program : extdefs_no_func . first_func_def  (4)
	extdefs_no_func : extdefs_no_func . extdef_no_func  (7)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 5
	CONST  shift 6
	.  error

	first_func_def  goto 20
	extdef_no_func  goto 21
	type  goto 11


state 10
	extdefs_no_func : extdef_no_func .  (8)

	.  reduce 8


state 11
	extdef_no_func : type . IDEN '(' para_in ')' ';'  (9)
	extdef_no_func : type . iden_list_init ';'  (11)
	first_func_def : type . IDEN '(' para_in ')' compound  (105)

	IDEN  shift 22
	.  error

	iden_list_init  goto 23


state 12
	extdef_no_func : VOID IDEN . '(' para_in ')' ';'  (10)
	first_func_def : VOID IDEN . '(' para_in ')' compound  (106)

	'('  shift 24
	.  error


state 13
	extdef_no_func : CONST type . const_iden_list ';'  (12)

	IDEN  shift 25
	.  error

	const_iden_list  goto 26


state 14
	extdef : VOID . IDEN '(' para_in ')' ';'  (27)
	func_def : VOID . IDEN '(' para_in ')' compound  (108)

	IDEN  shift 27
	.  error


state 15
	extdef : CONST . type const_iden_list ';'  (30)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 28


state 16
	program : first_func_def extdefs .  (1)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 14
	CONST  shift 15
	$end  reduce 1

	type  goto 17
	extdef  goto 29
	func_def  goto 19


state 17
	extdef : type . IDEN '(' para_in ')' ';'  (26)
	extdef : type . iden_list_init ';'  (29)
	func_def : type . IDEN '(' para_in ')' compound  (107)

	IDEN  shift 30
	.  error

	iden_list_init  goto 31


state 18
	extdefs : extdef .  (25)

	.  reduce 25


state 19
	extdef : func_def .  (28)

	.  reduce 28


state 20
	program : extdefs_no_func first_func_def . extdefs  (2)
	program : extdefs_no_func first_func_def .  (4)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 14
	CONST  shift 15
	$end  reduce 4

	extdefs  goto 32
	type  goto 17
	extdef  goto 18
	func_def  goto 19


state 21
	extdefs_no_func : extdefs_no_func extdef_no_func .  (7)

	.  reduce 7


state 22
	extdef_no_func : type IDEN . '(' para_in ')' ';'  (9)
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	first_func_def : type IDEN . '(' para_in ')' compound  (105)

	'('  shift 33
	'='  shift 34
	'['  shift 35
	';'  reduce 18
	','  reduce 18

	init  goto 36
	indexs_dec  goto 37
	index_dec  goto 38


state 23
	extdef_no_func : type iden_list_init . ';'  (11)
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)

	';'  shift 39
	','  shift 40
	.  error


state 24
	extdef_no_func : VOID IDEN '(' . para_in ')' ';'  (10)
	first_func_def : VOID IDEN '(' . para_in ')' compound  (106)
	para_in : .  (120)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 120

	type  goto 41
	para_in  goto 42
	paras  goto 43
	para  goto 44


state 25
	const_iden_list : IDEN . const_init  (22)

	'='  shift 45
	.  error

	const_init  goto 46


state 26
	extdef_no_func : CONST type const_iden_list . ';'  (12)
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)

	';'  shift 47
	','  shift 48
	.  error


state 27
	extdef : VOID IDEN . '(' para_in ')' ';'  (27)
	func_def : VOID IDEN . '(' para_in ')' compound  (108)

	'('  shift 49
	.  error


state 28
	extdef : CONST type . const_iden_list ';'  (30)

	IDEN  shift 25
	.  error

	const_iden_list  goto 50


state 29
	extdefs : extdefs extdef .  (24)

	.  reduce 24


state 30
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)
	extdef : type IDEN . '(' para_in ')' ';'  (26)
	func_def : type IDEN . '(' para_in ')' compound  (107)

	'('  shift 51
	'='  shift 34
	'['  shift 35
	';'  reduce 18
	','  reduce 18

	init  goto 36
	indexs_dec  goto 37
	index_dec  goto 38


state 31
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	extdef : type iden_list_init . ';'  (29)

	';'  shift 52
	','  shift 40
	.  error


state 32
	program : extdefs_no_func first_func_def extdefs .  (2)
	extdefs : extdefs . extdef  (24)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	VOID  shift 14
	CONST  shift 15
	$end  reduce 2

	type  goto 17
	extdef  goto 29
	func_def  goto 19


state 33
	extdef_no_func : type IDEN '(' . para_in ')' ';'  (9)
	first_func_def : type IDEN '(' . para_in ')' compound  (105)
	para_in : .  (120)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 120

	type  goto 41
	para_in  goto 53
	paras  goto 43
	para  goto 44


state 34
	init : '=' . expr_no_invoke  (118)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 65


state 35
	index_dec : '[' . INT_LIT ']'  (128)

	INT_LIT  shift 66
	.  error


state 36
	iden_list_init : IDEN init .  (17)

	.  reduce 17


state 37
	iden_list_init : IDEN indexs_dec . array_init  (19)
	iden_list_init : IDEN indexs_dec .  (20)
	indexs_dec : indexs_dec . index_dec  (126)

	'='  shift 67
	'['  shift 35
	';'  reduce 20
	','  reduce 20

	array_init  goto 68
	index_dec  goto 69


state 38
	indexs_dec : index_dec .  (127)

	.  reduce 127


state 39
	extdef_no_func : type iden_list_init ';' .  (11)

	.  reduce 11


state 40
	iden_list_init : iden_list_init ',' . IDEN  (13)
	iden_list_init : iden_list_init ',' . IDEN init  (14)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' . IDEN indexs_dec  (16)

	IDEN  shift 70
	.  error


state 41
	para : type . IDEN indexs_dec  (124)
	para : type . IDEN  (125)

	IDEN  shift 71
	.  error


state 42
	extdef_no_func : VOID IDEN '(' para_in . ')' ';'  (10)
	first_func_def : VOID IDEN '(' para_in . ')' compound  (106)

	')'  shift 72
	.  error


state 43
	para_in : paras .  (121)
	paras : paras . ',' para  (122)

	','  shift 73
	')'  reduce 121


state 44
	paras : para .  (123)

	.  reduce 123


state 45
	const_init : '=' . literal  (23)

	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	.  error

	literal  goto 74


state 46
	const_iden_list : IDEN const_init .  (22)

	.  reduce 22


state 47
	extdef_no_func : CONST type const_iden_list ';' .  (12)

	.  reduce 12


state 48
	const_iden_list : const_iden_list ',' . IDEN const_init  (21)

	IDEN  shift 75
	.  error


state 49
	extdef : VOID IDEN '(' . para_in ')' ';'  (27)
	func_def : VOID IDEN '(' . para_in ')' compound  (108)
	para_in : .  (120)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 120

	type  goto 41
	para_in  goto 76
	paras  goto 43
	para  goto 44


state 50
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	extdef : CONST type const_iden_list . ';'  (30)

	';'  shift 77
	','  shift 48
	.  error


state 51
	extdef : type IDEN '(' . para_in ')' ';'  (26)
	func_def : type IDEN '(' . para_in ')' compound  (107)
	para_in : .  (120)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	')'  reduce 120

	type  goto 41
	para_in  goto 78
	paras  goto 43
	para  goto 44


state 52
	extdef : type iden_list_init ';' .  (29)

	.  reduce 29


state 53
	extdef_no_func : type IDEN '(' para_in . ')' ';'  (9)
	first_func_def : type IDEN '(' para_in . ')' compound  (105)

	')'  shift 79
	.  error


state 54
	var : IDEN . indexs  (5)
	var : IDEN .  (6)

	'['  shift 80
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	';'  reduce 6
	','  reduce 6
	'}'  reduce 6

	indexs  goto 81
	index  goto 82


state 55
	literal : STRING_LIT .  (140)

	.  reduce 140


state 56
	literal : INT_LIT .  (137)

	.  reduce 137


state 57
	literal : BOOL_LIT .  (139)

	.  reduce 139


state 58
	expr_no_invoke : NOT . expr_no_invoke  (75)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 83


state 59
	literal : CHAR_LIT .  (136)

	.  reduce 136


state 60
	literal : DOUBLE_LIT .  (138)

	.  reduce 138


state 61
	expr_no_invoke : '-' . expr_no_invoke  (78)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 84


state 62
	expr_no_invoke : '(' . expr_no_invoke ')'  (79)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 85


state 63
	expr_no_invoke : literal .  (60)

	.  reduce 60


state 64
	expr_no_invoke : var .  (61)
	expr_no_invoke : var . PLUSPLUS  (62)
	expr_no_invoke : var . MINUSMINUS  (63)

	PLUSPLUS  shift 86
	MINUSMINUS  shift 87
	ANDAND  reduce 61
	OROR  reduce 61
	GE  reduce 61
	LE  reduce 61
	EQUAL  reduce 61
	NOTEQUAL  reduce 61
	'>'  reduce 61
	'<'  reduce 61
	'+'  reduce 61
	'-'  reduce 61
	'*'  reduce 61
	'/'  reduce 61
	'%'  reduce 61
	')'  reduce 61
	';'  reduce 61
	','  reduce 61
	'}'  reduce 61


state 65
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	init : '=' expr_no_invoke .  (118)

	ANDAND  shift 88
	OROR  shift 89
	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	';'  reduce 118
	','  reduce 118


state 66
	index_dec : '[' INT_LIT . ']'  (128)

	']'  shift 101
	.  error


state 67
	array_init : '=' . '{' exprs_comma_no_invoke_x '}'  (119)

	'{'  shift 102
	.  error


state 68
	iden_list_init : IDEN indexs_dec array_init .  (19)

	.  reduce 19


state 69
	indexs_dec : indexs_dec index_dec .  (126)

	.  reduce 126


state 70
	iden_list_init : iden_list_init ',' IDEN .  (13)
	iden_list_init : iden_list_init ',' IDEN . init  (14)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec array_init  (15)
	iden_list_init : iden_list_init ',' IDEN . indexs_dec  (16)

	'='  shift 34
	'['  shift 35
	';'  reduce 13
	','  reduce 13

	init  goto 103
	indexs_dec  goto 104
	index_dec  goto 38


state 71
	para : type IDEN . indexs_dec  (124)
	para : type IDEN .  (125)

	'['  shift 35
	')'  reduce 125
	','  reduce 125

	indexs_dec  goto 105
	index_dec  goto 38


state 72
	extdef_no_func : VOID IDEN '(' para_in ')' . ';'  (10)
	first_func_def : VOID IDEN '(' para_in ')' . compound  (106)

	';'  shift 106
	'{'  shift 107
	.  error

	compound  goto 108


state 73
	paras : paras ',' . para  (122)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 41
	para  goto 109


state 74
	const_init : '=' literal .  (23)

	.  reduce 23


state 75
	const_iden_list : const_iden_list ',' IDEN . const_init  (21)

	'='  shift 45
	.  error

	const_init  goto 110


state 76
	extdef : VOID IDEN '(' para_in . ')' ';'  (27)
	func_def : VOID IDEN '(' para_in . ')' compound  (108)

	')'  shift 111
	.  error


state 77
	extdef : CONST type const_iden_list ';' .  (30)

	.  reduce 30


state 78
	extdef : type IDEN '(' para_in . ')' ';'  (26)
	func_def : type IDEN '(' para_in . ')' compound  (107)

	')'  shift 112
	.  error


state 79
	extdef_no_func : type IDEN '(' para_in ')' . ';'  (9)
	first_func_def : type IDEN '(' para_in ')' . compound  (105)

	';'  shift 113
	'{'  shift 107
	.  error

	compound  goto 114


state 80
	index : '[' . expr ']'  (131)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 120
	var  goto 121


state 81
	var : IDEN indexs .  (5)
	indexs : indexs . index  (129)

	'['  shift 80
	PLUSPLUS  reduce 5
	MINUSMINUS  reduce 5
	ANDAND  reduce 5
	OROR  reduce 5
	GE  reduce 5
	LE  reduce 5
	EQUAL  reduce 5
	NOTEQUAL  reduce 5
	'>'  reduce 5
	'<'  reduce 5
	'+'  reduce 5
	'-'  reduce 5
	'*'  reduce 5
	'/'  reduce 5
	'%'  reduce 5
	')'  reduce 5
	';'  reduce 5
	','  reduce 5
	'='  reduce 5
	'}'  reduce 5
	']'  reduce 5

	index  goto 122


state 82
	indexs : index .  (130)

	.  reduce 130


state 83
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : NOT expr_no_invoke .  (75)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 75
	OROR  reduce 75
	')'  reduce 75
	';'  reduce 75
	','  reduce 75
	'}'  reduce 75


state 84
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '-' expr_no_invoke .  (78)

	.  reduce 78


state 85
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : '(' expr_no_invoke . ')'  (79)

	ANDAND  shift 88
	OROR  shift 89
	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	')'  shift 123
	.  error


state 86
	expr_no_invoke : var PLUSPLUS .  (62)

	.  reduce 62


state 87
	expr_no_invoke : var MINUSMINUS .  (63)

	.  reduce 63


state 88
	expr_no_invoke : expr_no_invoke ANDAND . expr_no_invoke  (76)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 124


state 89
	expr_no_invoke : expr_no_invoke OROR . expr_no_invoke  (77)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 125


state 90
	expr_no_invoke : expr_no_invoke GE . expr_no_invoke  (71)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 126


state 91
	expr_no_invoke : expr_no_invoke LE . expr_no_invoke  (72)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 127


state 92
	expr_no_invoke : expr_no_invoke EQUAL . expr_no_invoke  (73)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 128


state 93
	expr_no_invoke : expr_no_invoke NOTEQUAL . expr_no_invoke  (74)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 129


state 94
	expr_no_invoke : expr_no_invoke '>' . expr_no_invoke  (69)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 130


state 95
	expr_no_invoke : expr_no_invoke '<' . expr_no_invoke  (70)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 131


state 96
	expr_no_invoke : expr_no_invoke '+' . expr_no_invoke  (64)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 132


state 97
	expr_no_invoke : expr_no_invoke '-' . expr_no_invoke  (65)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 133


state 98
	expr_no_invoke : expr_no_invoke '*' . expr_no_invoke  (66)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 134


state 99
	expr_no_invoke : expr_no_invoke '/' . expr_no_invoke  (67)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 135


state 100
	expr_no_invoke : expr_no_invoke '%' . expr_no_invoke  (68)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 136


state 101
	index_dec : '[' INT_LIT ']' .  (128)

	.  reduce 128


state 102
	array_init : '=' '{' . exprs_comma_no_invoke_x '}'  (119)
	exprs_comma_no_invoke_x : .  (114)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	'}'  reduce 114

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 137
	exprs_comma_no_invoke_x  goto 138
	exprs_comma_no_invoke  goto 139


state 103
	iden_list_init : iden_list_init ',' IDEN init .  (14)

	.  reduce 14


state 104
	iden_list_init : iden_list_init ',' IDEN indexs_dec . array_init  (15)
	iden_list_init : iden_list_init ',' IDEN indexs_dec .  (16)
	indexs_dec : indexs_dec . index_dec  (126)

	'='  shift 67
	'['  shift 35
	';'  reduce 16
	','  reduce 16

	array_init  goto 140
	index_dec  goto 69


state 105
	para : type IDEN indexs_dec .  (124)
	indexs_dec : indexs_dec . index_dec  (126)

	'['  shift 35
	')'  reduce 124
	','  reduce 124

	index_dec  goto 69


state 106
	extdef_no_func : VOID IDEN '(' para_in ')' ';' .  (10)

	.  reduce 10


state 107
	compound : '{' . decs_x stmts_x '}'  (109)
	decs_x : .  (31)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 141
	IDEN  reduce 31
	SWITCH  reduce 31
	IF  reduce 31
	FOR  reduce 31
	WHILE  reduce 31
	DO  reduce 31
	RETURN  reduce 31
	CONTINUE  reduce 31
	BREAK  reduce 31
	'}'  reduce 31

	type  goto 142
	decs_x  goto 143
	decs  goto 144
	dec  goto 145


state 108
	first_func_def : VOID IDEN '(' para_in ')' compound .  (106)

	.  reduce 106


state 109
	paras : paras ',' para .  (122)

	.  reduce 122


state 110
	const_iden_list : const_iden_list ',' IDEN const_init .  (21)

	.  reduce 21


state 111
	extdef : VOID IDEN '(' para_in ')' . ';'  (27)
	func_def : VOID IDEN '(' para_in ')' . compound  (108)

	';'  shift 146
	'{'  shift 107
	.  error

	compound  goto 147


state 112
	extdef : type IDEN '(' para_in ')' . ';'  (26)
	func_def : type IDEN '(' para_in ')' . compound  (107)

	';'  shift 148
	'{'  shift 107
	.  error

	compound  goto 149


state 113
	extdef_no_func : type IDEN '(' para_in ')' ';' .  (9)

	.  reduce 9


state 114
	first_func_def : type IDEN '(' para_in ')' compound .  (105)

	.  reduce 105


state 115
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	expr : IDEN . '(' exprs_comma_x ')'  (43)

	'('  shift 150
	'['  shift 80
	PLUSPLUS  reduce 6
	MINUSMINUS  reduce 6
	ANDAND  reduce 6
	OROR  reduce 6
	GE  reduce 6
	LE  reduce 6
	EQUAL  reduce 6
	NOTEQUAL  reduce 6
	'>'  reduce 6
	'<'  reduce 6
	'+'  reduce 6
	'-'  reduce 6
	'*'  reduce 6
	'/'  reduce 6
	'%'  reduce 6
	')'  reduce 6
	';'  reduce 6
	','  reduce 6
	']'  reduce 6

	indexs  goto 81
	index  goto 82


state 116
	expr : NOT . expr  (55)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 151
	var  goto 121


state 117
	expr : '-' . expr  (58)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 152
	var  goto 121


state 118
	expr : '(' . expr ')'  (59)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 153
	var  goto 121


state 119
	expr : literal .  (39)

	.  reduce 39


state 120
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	index : '[' expr . ']'  (131)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	']'  shift 167
	.  error


state 121
	expr : var .  (40)
	expr : var . PLUSPLUS  (41)
	expr : var . MINUSMINUS  (42)

	PLUSPLUS  shift 168
	MINUSMINUS  shift 169
	ANDAND  reduce 40
	OROR  reduce 40
	GE  reduce 40
	LE  reduce 40
	EQUAL  reduce 40
	NOTEQUAL  reduce 40
	'>'  reduce 40
	'<'  reduce 40
	'+'  reduce 40
	'-'  reduce 40
	'*'  reduce 40
	'/'  reduce 40
	'%'  reduce 40
	')'  reduce 40
	';'  reduce 40
	','  reduce 40
	']'  reduce 40


state 122
	indexs : indexs index .  (129)

	.  reduce 129


state 123
	expr_no_invoke : '(' expr_no_invoke ')' .  (79)

	.  reduce 79


state 124
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke ANDAND expr_no_invoke .  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 76
	OROR  reduce 76
	')'  reduce 76
	';'  reduce 76
	','  reduce 76
	'}'  reduce 76


state 125
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	expr_no_invoke : expr_no_invoke OROR expr_no_invoke .  (77)

	ANDAND  shift 88
	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	OROR  reduce 77
	')'  reduce 77
	';'  reduce 77
	','  reduce 77
	'}'  reduce 77


state 126
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke GE expr_no_invoke .  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 71
	OROR  reduce 71
	GE  reduce 71
	LE  reduce 71
	EQUAL  reduce 71
	NOTEQUAL  reduce 71
	'>'  reduce 71
	'<'  reduce 71
	')'  reduce 71
	';'  reduce 71
	','  reduce 71
	'}'  reduce 71


state 127
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke LE expr_no_invoke .  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 72
	OROR  reduce 72
	GE  reduce 72
	LE  reduce 72
	EQUAL  reduce 72
	NOTEQUAL  reduce 72
	'>'  reduce 72
	'<'  reduce 72
	')'  reduce 72
	';'  reduce 72
	','  reduce 72
	'}'  reduce 72


state 128
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke EQUAL expr_no_invoke .  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 73
	OROR  reduce 73
	GE  reduce 73
	LE  reduce 73
	EQUAL  reduce 73
	NOTEQUAL  reduce 73
	'>'  reduce 73
	'<'  reduce 73
	')'  reduce 73
	';'  reduce 73
	','  reduce 73
	'}'  reduce 73


state 129
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke NOTEQUAL expr_no_invoke .  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 74
	OROR  reduce 74
	GE  reduce 74
	LE  reduce 74
	EQUAL  reduce 74
	NOTEQUAL  reduce 74
	'>'  reduce 74
	'<'  reduce 74
	')'  reduce 74
	';'  reduce 74
	','  reduce 74
	'}'  reduce 74


state 130
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke '>' expr_no_invoke .  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 69
	OROR  reduce 69
	GE  reduce 69
	LE  reduce 69
	EQUAL  reduce 69
	NOTEQUAL  reduce 69
	'>'  reduce 69
	'<'  reduce 69
	')'  reduce 69
	';'  reduce 69
	','  reduce 69
	'}'  reduce 69


state 131
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke '<' expr_no_invoke .  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 70
	OROR  reduce 70
	GE  reduce 70
	LE  reduce 70
	EQUAL  reduce 70
	NOTEQUAL  reduce 70
	'>'  reduce 70
	'<'  reduce 70
	')'  reduce 70
	';'  reduce 70
	','  reduce 70
	'}'  reduce 70


state 132
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke '+' expr_no_invoke .  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 64
	OROR  reduce 64
	GE  reduce 64
	LE  reduce 64
	EQUAL  reduce 64
	NOTEQUAL  reduce 64
	'>'  reduce 64
	'<'  reduce 64
	'+'  reduce 64
	'-'  reduce 64
	')'  reduce 64
	';'  reduce 64
	','  reduce 64
	'}'  reduce 64


state 133
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke '-' expr_no_invoke .  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	ANDAND  reduce 65
	OROR  reduce 65
	GE  reduce 65
	LE  reduce 65
	EQUAL  reduce 65
	NOTEQUAL  reduce 65
	'>'  reduce 65
	'<'  reduce 65
	'+'  reduce 65
	'-'  reduce 65
	')'  reduce 65
	';'  reduce 65
	','  reduce 65
	'}'  reduce 65


state 134
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke '*' expr_no_invoke .  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 66


state 135
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke '/' expr_no_invoke .  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 67


state 136
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke '%' expr_no_invoke .  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)

	.  reduce 68


state 137
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : expr_no_invoke .  (117)

	ANDAND  shift 88
	OROR  shift 89
	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	','  reduce 117
	'}'  reduce 117


state 138
	array_init : '=' '{' exprs_comma_no_invoke_x . '}'  (119)

	'}'  shift 170
	.  error


state 139
	exprs_comma_no_invoke_x : exprs_comma_no_invoke .  (115)
	exprs_comma_no_invoke : exprs_comma_no_invoke . ',' expr_no_invoke  (116)

	','  shift 171
	'}'  reduce 115


state 140
	iden_list_init : iden_list_init ',' IDEN indexs_dec array_init .  (15)

	.  reduce 15


state 141
	dec : CONST . type const_iden_list ';'  (36)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	.  error

	type  goto 172


state 142
	dec : type . iden_list_init ';'  (35)

	IDEN  shift 173
	.  error

	iden_list_init  goto 174


state 143
	compound : '{' decs_x . stmts_x '}'  (109)
	stmts_x : .  (80)

	IDEN  shift 175
	SWITCH  shift 176
	IF  shift 177
	FOR  shift 178
	WHILE  shift 179
	DO  shift 180
	RETURN  shift 181
	CONTINUE  shift 182
	BREAK  shift 183
	'}'  reduce 80

	var  goto 184
	stmts_x  goto 185
	stmts  goto 186
	stmt  goto 187
	if_stmt  goto 188
	while_stmt  goto 189
	switch_stmt  goto 190
	for_stmt  goto 191


state 144
	decs_x : decs .  (32)
	decs : decs . dec  (33)

	INT  shift 1
	DOUBLE  shift 2
	BOOL  shift 3
	CHAR  shift 4
	CONST  shift 141
	IDEN  reduce 32
	SWITCH  reduce 32
	IF  reduce 32
	FOR  reduce 32
	WHILE  reduce 32
	DO  reduce 32
	RETURN  reduce 32
	CONTINUE  reduce 32
	BREAK  reduce 32
	'}'  reduce 32

	type  goto 142
	dec  goto 192


state 145
	decs : dec .  (34)

	.  reduce 34


state 146
	extdef : VOID IDEN '(' para_in ')' ';' .  (27)

	.  reduce 27


state 147
	func_def : VOID IDEN '(' para_in ')' compound .  (108)

	.  reduce 108


state 148
	extdef : type IDEN '(' para_in ')' ';' .  (26)

	.  reduce 26


state 149
	func_def : type IDEN '(' para_in ')' compound .  (107)

	.  reduce 107


state 150
	expr : IDEN '(' . exprs_comma_x ')'  (43)
	exprs_comma_x : .  (110)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	')'  reduce 110

	literal  goto 119
	expr  goto 193
	var  goto 121
	exprs_comma_x  goto 194
	exprs_comma  goto 195


state 151
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : NOT expr .  (55)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 55
	OROR  reduce 55
	')'  reduce 55
	';'  reduce 55
	','  reduce 55
	']'  reduce 55


state 152
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '-' expr .  (58)

	.  reduce 58


state 153
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : '(' expr . ')'  (59)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  shift 196
	.  error


state 154
	expr : expr ANDAND . expr  (56)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 197
	var  goto 121


state 155
	expr : expr OROR . expr  (57)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 198
	var  goto 121


state 156
	expr : expr GE . expr  (51)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 199
	var  goto 121


state 157
	expr : expr LE . expr  (52)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 200
	var  goto 121


state 158
	expr : expr EQUAL . expr  (53)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 201
	var  goto 121


state 159
	expr : expr NOTEQUAL . expr  (54)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 202
	var  goto 121


state 160
	expr : expr '>' . expr  (49)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 203
	var  goto 121


state 161
	expr : expr '<' . expr  (50)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 204
	var  goto 121


state 162
	expr : expr '+' . expr  (44)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 205
	var  goto 121


state 163
	expr : expr '-' . expr  (45)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 206
	var  goto 121


state 164
	expr : expr '*' . expr  (46)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 207
	var  goto 121


state 165
	expr : expr '/' . expr  (47)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 208
	var  goto 121


state 166
	expr : expr '%' . expr  (48)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 209
	var  goto 121


state 167
	index : '[' expr ']' .  (131)

	.  reduce 131


state 168
	expr : var PLUSPLUS .  (41)

	.  reduce 41


state 169
	expr : var MINUSMINUS .  (42)

	.  reduce 42


state 170
	array_init : '=' '{' exprs_comma_no_invoke_x '}' .  (119)

	.  reduce 119


state 171
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' . expr_no_invoke  (116)

	IDEN  shift 54
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 58
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 61
	'('  shift 62
	.  error

	literal  goto 63
	var  goto 64
	expr_no_invoke  goto 210


state 172
	dec : CONST type . const_iden_list ';'  (36)

	IDEN  shift 25
	.  error

	const_iden_list  goto 211


state 173
	iden_list_init : IDEN . init  (17)
	iden_list_init : IDEN .  (18)
	iden_list_init : IDEN . indexs_dec array_init  (19)
	iden_list_init : IDEN . indexs_dec  (20)

	'='  shift 34
	'['  shift 35
	';'  reduce 18
	','  reduce 18

	init  goto 36
	indexs_dec  goto 37
	index_dec  goto 38


state 174
	iden_list_init : iden_list_init . ',' IDEN  (13)
	iden_list_init : iden_list_init . ',' IDEN init  (14)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec array_init  (15)
	iden_list_init : iden_list_init . ',' IDEN indexs_dec  (16)
	dec : type iden_list_init . ';'  (35)

	';'  shift 212
	','  shift 40
	.  error


state 175
	var : IDEN . indexs  (5)
	var : IDEN .  (6)
	stmt : IDEN . '(' exprs_comma_x ')' ';'  (89)

	'('  shift 213
	'['  shift 80
	'='  reduce 6

	indexs  goto 81
	index  goto 82


state 176
	switch_stmt : SWITCH . '(' IDEN ')' '{' cases default_x '}'  (98)

	'('  shift 214
	.  error


state 177
	if_stmt : IF . '(' expr ')' compound ELSE compound  (93)
	if_stmt : IF . '(' expr ')' compound  (94)

	'('  shift 215
	.  error


state 178
	for_stmt : FOR . '(' expr_x ';' expr_x ';' expr_x ')' compound  (97)

	'('  shift 216
	.  error


state 179
	while_stmt : WHILE . '(' expr ')' compound  (95)

	'('  shift 217
	.  error


state 180
	while_stmt : DO . compound WHILE '(' expr ')' ';'  (96)

	'{'  shift 107
	.  error

	compound  goto 218


state 181
	stmt : RETURN . expr ';'  (90)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 219
	var  goto 121


state 182
	stmt : CONTINUE . ';'  (92)

	';'  shift 220
	.  error


state 183
	stmt : BREAK . ';'  (91)

	';'  shift 221
	.  error


state 184
	stmt : var . '=' expr ';'  (84)

	'='  shift 222
	.  error


state 185
	compound : '{' decs_x stmts_x . '}'  (109)

	'}'  shift 223
	.  error


state 186
	stmts_x : stmts .  (81)
	stmts : stmts . stmt  (82)

	IDEN  shift 175
	SWITCH  shift 176
	IF  shift 177
	FOR  shift 178
	WHILE  shift 179
	DO  shift 180
	RETURN  shift 181
	CONTINUE  shift 182
	BREAK  shift 183
	CASE  reduce 81
	DEFAULT  reduce 81
	'}'  reduce 81

	var  goto 184
	stmt  goto 224
	if_stmt  goto 188
	while_stmt  goto 189
	switch_stmt  goto 190
	for_stmt  goto 191


state 187
	stmts : stmt .  (83)

	.  reduce 83


state 188
	stmt : if_stmt .  (85)

	.  reduce 85


state 189
	stmt : while_stmt .  (86)

	.  reduce 86


state 190
	stmt : switch_stmt .  (87)

	.  reduce 87


state 191
	stmt : for_stmt .  (88)

	.  reduce 88


state 192
	decs : decs dec .  (33)

	.  reduce 33


state 193
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : expr .  (113)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  reduce 113
	','  reduce 113


state 194
	expr : IDEN '(' exprs_comma_x . ')'  (43)

	')'  shift 225
	.  error


state 195
	exprs_comma_x : exprs_comma .  (111)
	exprs_comma : exprs_comma . ',' expr  (112)

	','  shift 226
	')'  reduce 111


state 196
	expr : '(' expr ')' .  (59)

	.  reduce 59


state 197
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr ANDAND expr .  (56)
	expr : expr . OROR expr  (57)

	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 56
	OROR  reduce 56
	')'  reduce 56
	';'  reduce 56
	','  reduce 56
	']'  reduce 56


state 198
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	expr : expr OROR expr .  (57)

	ANDAND  shift 154
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	OROR  reduce 57
	')'  reduce 57
	';'  reduce 57
	','  reduce 57
	']'  reduce 57


state 199
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr GE expr .  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 51
	OROR  reduce 51
	GE  reduce 51
	LE  reduce 51
	EQUAL  reduce 51
	NOTEQUAL  reduce 51
	'>'  reduce 51
	'<'  reduce 51
	')'  reduce 51
	';'  reduce 51
	','  reduce 51
	']'  reduce 51


state 200
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr LE expr .  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 52
	OROR  reduce 52
	GE  reduce 52
	LE  reduce 52
	EQUAL  reduce 52
	NOTEQUAL  reduce 52
	'>'  reduce 52
	'<'  reduce 52
	')'  reduce 52
	';'  reduce 52
	','  reduce 52
	']'  reduce 52


state 201
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr EQUAL expr .  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 53
	OROR  reduce 53
	GE  reduce 53
	LE  reduce 53
	EQUAL  reduce 53
	NOTEQUAL  reduce 53
	'>'  reduce 53
	'<'  reduce 53
	')'  reduce 53
	';'  reduce 53
	','  reduce 53
	']'  reduce 53


state 202
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr NOTEQUAL expr .  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 54
	OROR  reduce 54
	GE  reduce 54
	LE  reduce 54
	EQUAL  reduce 54
	NOTEQUAL  reduce 54
	'>'  reduce 54
	'<'  reduce 54
	')'  reduce 54
	';'  reduce 54
	','  reduce 54
	']'  reduce 54


state 203
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr '>' expr .  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 49
	OROR  reduce 49
	GE  reduce 49
	LE  reduce 49
	EQUAL  reduce 49
	NOTEQUAL  reduce 49
	'>'  reduce 49
	'<'  reduce 49
	')'  reduce 49
	';'  reduce 49
	','  reduce 49
	']'  reduce 49


state 204
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr '<' expr .  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 50
	OROR  reduce 50
	GE  reduce 50
	LE  reduce 50
	EQUAL  reduce 50
	NOTEQUAL  reduce 50
	'>'  reduce 50
	'<'  reduce 50
	')'  reduce 50
	';'  reduce 50
	','  reduce 50
	']'  reduce 50


state 205
	expr : expr . '+' expr  (44)
	expr : expr '+' expr .  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 44
	OROR  reduce 44
	GE  reduce 44
	LE  reduce 44
	EQUAL  reduce 44
	NOTEQUAL  reduce 44
	'>'  reduce 44
	'<'  reduce 44
	'+'  reduce 44
	'-'  reduce 44
	')'  reduce 44
	';'  reduce 44
	','  reduce 44
	']'  reduce 44


state 206
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr '-' expr .  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	ANDAND  reduce 45
	OROR  reduce 45
	GE  reduce 45
	LE  reduce 45
	EQUAL  reduce 45
	NOTEQUAL  reduce 45
	'>'  reduce 45
	'<'  reduce 45
	'+'  reduce 45
	'-'  reduce 45
	')'  reduce 45
	';'  reduce 45
	','  reduce 45
	']'  reduce 45


state 207
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr '*' expr .  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 46


state 208
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr '/' expr .  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 47


state 209
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr '%' expr .  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	.  reduce 48


state 210
	expr_no_invoke : expr_no_invoke . '+' expr_no_invoke  (64)
	expr_no_invoke : expr_no_invoke . '-' expr_no_invoke  (65)
	expr_no_invoke : expr_no_invoke . '*' expr_no_invoke  (66)
	expr_no_invoke : expr_no_invoke . '/' expr_no_invoke  (67)
	expr_no_invoke : expr_no_invoke . '%' expr_no_invoke  (68)
	expr_no_invoke : expr_no_invoke . '>' expr_no_invoke  (69)
	expr_no_invoke : expr_no_invoke . '<' expr_no_invoke  (70)
	expr_no_invoke : expr_no_invoke . GE expr_no_invoke  (71)
	expr_no_invoke : expr_no_invoke . LE expr_no_invoke  (72)
	expr_no_invoke : expr_no_invoke . EQUAL expr_no_invoke  (73)
	expr_no_invoke : expr_no_invoke . NOTEQUAL expr_no_invoke  (74)
	expr_no_invoke : expr_no_invoke . ANDAND expr_no_invoke  (76)
	expr_no_invoke : expr_no_invoke . OROR expr_no_invoke  (77)
	exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke .  (116)

	ANDAND  shift 88
	OROR  shift 89
	GE  shift 90
	LE  shift 91
	EQUAL  shift 92
	NOTEQUAL  shift 93
	'>'  shift 94
	'<'  shift 95
	'+'  shift 96
	'-'  shift 97
	'*'  shift 98
	'/'  shift 99
	'%'  shift 100
	','  reduce 116
	'}'  reduce 116


state 211
	const_iden_list : const_iden_list . ',' IDEN const_init  (21)
	dec : CONST type const_iden_list . ';'  (36)

	';'  shift 227
	','  shift 48
	.  error


state 212
	dec : type iden_list_init ';' .  (35)

	.  reduce 35


state 213
	stmt : IDEN '(' . exprs_comma_x ')' ';'  (89)
	exprs_comma_x : .  (110)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	')'  reduce 110

	literal  goto 119
	expr  goto 193
	var  goto 121
	exprs_comma_x  goto 228
	exprs_comma  goto 195


state 214
	switch_stmt : SWITCH '(' . IDEN ')' '{' cases default_x '}'  (98)

	IDEN  shift 229
	.  error


state 215
	if_stmt : IF '(' . expr ')' compound ELSE compound  (93)
	if_stmt : IF '(' . expr ')' compound  (94)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 230
	var  goto 121


state 216
	for_stmt : FOR '(' . expr_x ';' expr_x ';' expr_x ')' compound  (97)
	expr_x : .  (37)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	';'  reduce 37

	literal  goto 119
	expr  goto 231
	var  goto 121
	expr_x  goto 232


state 217
	while_stmt : WHILE '(' . expr ')' compound  (95)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 233
	var  goto 121


state 218
	while_stmt : DO compound . WHILE '(' expr ')' ';'  (96)

	WHILE  shift 234
	.  error


state 219
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	stmt : RETURN expr . ';'  (90)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	';'  shift 235
	.  error


state 220
	stmt : CONTINUE ';' .  (92)

	.  reduce 92


state 221
	stmt : BREAK ';' .  (91)

	.  reduce 91


state 222
	stmt : var '=' . expr ';'  (84)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 236
	var  goto 121


state 223
	compound : '{' decs_x stmts_x '}' .  (109)

	.  reduce 109


state 224
	stmts : stmts stmt .  (82)

	.  reduce 82


state 225
	expr : IDEN '(' exprs_comma_x ')' .  (43)

	.  reduce 43


state 226
	exprs_comma : exprs_comma ',' . expr  (112)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 237
	var  goto 121


state 227
	dec : CONST type const_iden_list ';' .  (36)

	.  reduce 36


state 228
	stmt : IDEN '(' exprs_comma_x . ')' ';'  (89)

	')'  shift 238
	.  error


state 229
	switch_stmt : SWITCH '(' IDEN . ')' '{' cases default_x '}'  (98)

	')'  shift 239
	.  error


state 230
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	if_stmt : IF '(' expr . ')' compound ELSE compound  (93)
	if_stmt : IF '(' expr . ')' compound  (94)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  shift 240
	.  error


state 231
	expr_x : expr .  (38)
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  reduce 38
	';'  reduce 38


state 232
	for_stmt : FOR '(' expr_x . ';' expr_x ';' expr_x ')' compound  (97)

	';'  shift 241
	.  error


state 233
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : WHILE '(' expr . ')' compound  (95)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  shift 242
	.  error


state 234
	while_stmt : DO compound WHILE . '(' expr ')' ';'  (96)

	'('  shift 243
	.  error


state 235
	stmt : RETURN expr ';' .  (90)

	.  reduce 90


state 236
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	stmt : var '=' expr . ';'  (84)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	';'  shift 244
	.  error


state 237
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	exprs_comma : exprs_comma ',' expr .  (112)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  reduce 112
	','  reduce 112


state 238
	stmt : IDEN '(' exprs_comma_x ')' . ';'  (89)

	';'  shift 245
	.  error


state 239
	switch_stmt : SWITCH '(' IDEN ')' . '{' cases default_x '}'  (98)

	'{'  shift 246
	.  error


state 240
	if_stmt : IF '(' expr ')' . compound ELSE compound  (93)
	if_stmt : IF '(' expr ')' . compound  (94)

	'{'  shift 107
	.  error

	compound  goto 247


state 241
	for_stmt : FOR '(' expr_x ';' . expr_x ';' expr_x ')' compound  (97)
	expr_x : .  (37)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	';'  reduce 37

	literal  goto 119
	expr  goto 231
	var  goto 121
	expr_x  goto 248


state 242
	while_stmt : WHILE '(' expr ')' . compound  (95)

	'{'  shift 107
	.  error

	compound  goto 249


state 243
	while_stmt : DO compound WHILE '(' . expr ')' ';'  (96)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	.  error

	literal  goto 119
	expr  goto 250
	var  goto 121


state 244
	stmt : var '=' expr ';' .  (84)

	.  reduce 84


state 245
	stmt : IDEN '(' exprs_comma_x ')' ';' .  (89)

	.  reduce 89


state 246
	switch_stmt : SWITCH '(' IDEN ')' '{' . cases default_x '}'  (98)

	CASE  shift 251
	.  error

	cases  goto 252
	case  goto 253


state 247
	if_stmt : IF '(' expr ')' compound . ELSE compound  (93)
	if_stmt : IF '(' expr ')' compound .  (94)

	ELSE  shift 254
	IDEN  reduce 94
	SWITCH  reduce 94
	CASE  reduce 94
	DEFAULT  reduce 94
	IF  reduce 94
	FOR  reduce 94
	WHILE  reduce 94
	DO  reduce 94
	RETURN  reduce 94
	CONTINUE  reduce 94
	BREAK  reduce 94
	'}'  reduce 94


state 248
	for_stmt : FOR '(' expr_x ';' expr_x . ';' expr_x ')' compound  (97)

	';'  shift 255
	.  error


state 249
	while_stmt : WHILE '(' expr ')' compound .  (95)

	.  reduce 95


state 250
	expr : expr . '+' expr  (44)
	expr : expr . '-' expr  (45)
	expr : expr . '*' expr  (46)
	expr : expr . '/' expr  (47)
	expr : expr . '%' expr  (48)
	expr : expr . '>' expr  (49)
	expr : expr . '<' expr  (50)
	expr : expr . GE expr  (51)
	expr : expr . LE expr  (52)
	expr : expr . EQUAL expr  (53)
	expr : expr . NOTEQUAL expr  (54)
	expr : expr . ANDAND expr  (56)
	expr : expr . OROR expr  (57)
	while_stmt : DO compound WHILE '(' expr . ')' ';'  (96)

	ANDAND  shift 154
	OROR  shift 155
	GE  shift 156
	LE  shift 157
	EQUAL  shift 158
	NOTEQUAL  shift 159
	'>'  shift 160
	'<'  shift 161
	'+'  shift 162
	'-'  shift 163
	'*'  shift 164
	'/'  shift 165
	'%'  shift 166
	')'  shift 256
	.  error


state 251
	case : CASE . CHAR_LIT ':' stmts_x  (101)
	case : CASE . INT_LIT ':' stmts_x  (102)

	INT_LIT  shift 257
	CHAR_LIT  shift 258
	.  error


state 252
	switch_stmt : SWITCH '(' IDEN ')' '{' cases . default_x '}'  (98)
	cases : cases . case  (99)
	default_x : .  (103)

	CASE  shift 251
	DEFAULT  shift 259
	'}'  reduce 103

	default_x  goto 260
	case  goto 261


state 253
	cases : case .  (100)

	.  reduce 100


state 254
	if_stmt : IF '(' expr ')' compound ELSE . compound  (93)

	'{'  shift 107
	.  error

	compound  goto 262


state 255
	for_stmt : FOR '(' expr_x ';' expr_x ';' . expr_x ')' compound  (97)
	expr_x : .  (37)

	IDEN  shift 115
	STRING_LIT  shift 55
	INT_LIT  shift 56
	BOOL_LIT  shift 57
	NOT  shift 116
	CHAR_LIT  shift 59
	DOUBLE_LIT  shift 60
	'-'  shift 117
	'('  shift 118
	')'  reduce 37

	literal  goto 119
	expr  goto 231
	var  goto 121
	expr_x  goto 263


state 256
	while_stmt : DO compound WHILE '(' expr ')' . ';'  (96)

	';'  shift 264
	.  error


state 257
	case : CASE INT_LIT . ':' stmts_x  (102)

	':'  shift 265
	.  error


state 258
	case : CASE CHAR_LIT . ':' stmts_x  (101)

	':'  shift 266
	.  error


state 259
	default_x : DEFAULT . ':' stmts_x  (104)

	':'  shift 267
	.  error


state 260
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x . '}'  (98)

	'}'  shift 268
	.  error


state 261
	cases : cases case .  (99)

	.  reduce 99


state 262
	if_stmt : IF '(' expr ')' compound ELSE compound .  (93)

	.  reduce 93


state 263
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x . ')' compound  (97)

	')'  shift 269
	.  error


state 264
	while_stmt : DO compound WHILE '(' expr ')' ';' .  (96)

	.  reduce 96


state 265
	case : CASE INT_LIT ':' . stmts_x  (102)
	stmts_x : .  (80)

	IDEN  shift 175
	SWITCH  shift 176
	IF  shift 177
	FOR  shift 178
	WHILE  shift 179
	DO  shift 180
	RETURN  shift 181
	CONTINUE  shift 182
	BREAK  shift 183
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 184
	stmts_x  goto 270
	stmts  goto 186
	stmt  goto 187
	if_stmt  goto 188
	while_stmt  goto 189
	switch_stmt  goto 190
	for_stmt  goto 191


state 266
	case : CASE CHAR_LIT ':' . stmts_x  (101)
	stmts_x : .  (80)

	IDEN  shift 175
	SWITCH  shift 176
	IF  shift 177
	FOR  shift 178
	WHILE  shift 179
	DO  shift 180
	RETURN  shift 181
	CONTINUE  shift 182
	BREAK  shift 183
	CASE  reduce 80
	DEFAULT  reduce 80
	'}'  reduce 80

	var  goto 184
	stmts_x  goto 271
	stmts  goto 186
	stmt  goto 187
	if_stmt  goto 188
	while_stmt  goto 189
	switch_stmt  goto 190
	for_stmt  goto 191


state 267
	default_x : DEFAULT ':' . stmts_x  (104)
	stmts_x : .  (80)

	IDEN  shift 175
	SWITCH  shift 176
	IF  shift 177
	FOR  shift 178
	WHILE  shift 179
	DO  shift 180
	RETURN  shift 181
	CONTINUE  shift 182
	BREAK  shift 183
	'}'  reduce 80

	var  goto 184
	stmts_x  goto 272
	stmts  goto 186
	stmt  goto 187
	if_stmt  goto 188
	while_stmt  goto 189
	switch_stmt  goto 190
	for_stmt  goto 191


state 268
	switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}' .  (98)

	.  reduce 98


state 269
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' . compound  (97)

	'{'  shift 107
	.  error

	compound  goto 273


state 270
	case : CASE INT_LIT ':' stmts_x .  (102)

	.  reduce 102


state 271
	case : CASE CHAR_LIT ':' stmts_x .  (101)

	.  reduce 101


state 272
	default_x : DEFAULT ':' stmts_x .  (104)

	.  reduce 104


state 273
	for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x ')' compound .  (97)

	.  reduce 97


56 terminals, 44 nonterminals
141 grammar rules, 274 states
