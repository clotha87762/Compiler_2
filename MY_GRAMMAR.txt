

program : extdefs_no_func_x  first_func_def  extdefs_x	
		;


var : IDEN indexs_x
	;

extdefs_no_func_x: epsilon
				|  extdefs_no_func
				;

extdefs_no_func : extdefs_no_func  extdef_no_func
				| extdef_no_func
				;

extdef_no_func: type_void  IDEN '('  para_in ')' ';'  // function declaration
	|	type iden_list_init  ';'
	|	CONST const_iden_list ';'
	;

iden_list_init: iden_list_init ','  IDEN init_x
			  | iden_list_init ','  IDEN indexs_dec_x array_init_x 
			  | IDEN init_x
			  | IDEN indexs_dec_x array_init_x
			  ;

const_iden_list : const_iden_list ','  IDEN const_init
				| IDEN const_init  
				;

const_init : '=' literal
			;


extdefs_x: epsilon
		|  extdefs
		;

extdefs: extdefs extdef
		| extdef
		;


extdef: type_void  IDEN '('  para_in ')' ';'  // function declaration
	|	func_def
	|	type iden_list_init  ';'
	|	CONST const_iden_list ';'
	;

decs_x : epsilon
	   | decs
	   ;


decs :  decs  dec
	 |  dec
	 ;

dec:   type iden_list_init  ';'
	   | CONST const_iden_list ';'
	   ;

expr_x : epsilon
		| expr
		;

expr: literal
	| var
	| var PLUSPLUS
	| var MINUSMINUS
	| func_invoke
	| expr '+' expr
	|  expr '-' expr
	|  expr '*' expr
	|  expr '/' expr 
	|  expr '%' expr
	|  expr '>' expr
	|  expr '<' expr
	|  expr GE expr
	|  expr LE expr
	|  expr EQUAL expr
	|  expr NOTEQUAL expr
	|  NOT expr
	|  expr ANDAND expr
	|  expr OROR expr
	|  '-' expr %prec UMINUS
	| '(' expr ')'
	| '(' var ')' PLUSPLUS
	| '(' var ')' MINUSMINUS
	;	

expr_no_invoke:: literal
			| var
			| var PLUSPLUS
			| var MINUSMINUS
			| expr '+' expr
			|  expr '-' expr
			|  expr '*' expr
			|  expr '/' expr 
			|  expr '%' expr
			|  expr '>' expr
			|  expr '<' expr
			|  expr GE expr
			|  expr LE expr
			|  expr EQUAL expr
			|  expr NOTEQUAL expr
			|  NOT expr
			|  expr ANDAND expr
			|  expr OROR expr
			|  '-' expr %prec UMINUS
			| '(' expr ')'
			| '(' var ')' PLUSPLUS
			| '(' var ')' MINUSMINUS	
			;


stmts_x : epsilon
		| stmts
		;

stmts:  stmts  stmt
	  | stmt
	  ;

stmt: var '=' expr
	|  if_stmt
	|  while_stmt
	|  switch_stmt
	|  for_stmt
	| func
	| RETURN expr ';'
	| BREAK ';'
	| CONTINUE ';'
	;

if_stmt: IF '(' expr ')' compound
		| IF '(' expr ')' compound ELSE compound
		;

while_stmt: WHILE '( expr ')' compound
		  | DO compound WHILE '(' expr ')' ';'
		  ;
 
for_stmt : FOR '(' expr_x ';' expr_x ';' expr_x  ')' compound

switch_stmt : SWITCH '(' IDEN ')' '{' cases default_x '}'

cases: cases case
	 | case
	 ;

cases: CASE CHAR_LIT ':' stmts_x
	 | CASE INT_LIT ':' stmts_x
	 ;  

default_x: epsilon
		 |  DEFAULT ':' stmts_x
		 ;

func_invoke: IDEN '('  exprs_comma_x ')' ';'
		   | var = IDEN '(' exprs_comma_x ')' ';'							//  這邊我把 IDEN -> VAR
		   ;


first_func_def : type_void IDEN '(' para_in ')' compound

func_def: type_void IDEN '(' para_in ')' compound

compound: '{'  decs_x  stmts_x '}'



exprs_comma_x: epsilon
		| exprs_comma
		;

exprs_comma: exprs_comma ',' expr
	| expr
	;

exprs_comma_no_invoke_x : epsilon
					    | exprs_comma_no_invoke
					    ;

exprs_comma_no_invoke : exprs_comma_no_invoke ',' expr_no_invoke
					  | expr_no_invoke
					  ; 


init_x : epsilon
		| '=' expr_no_invoke
		;

array_init_x: epsilon
			| '=' '{' exprs_comma_no_invoke_x '}'
			;

para_in :  epsilon
		|  paras
		;

paras:	paras ',' para
	 |  para
	 ;

para: type IDEN indexs_dec_x
	 ;

indexs_dec_x: epsilon
	   |  indexs_dec
	   ;

indexs_dec: indexs_dec	index_dec
		| index_dec
		;

index_dec: '[' INT_CONSTANT ']'

indexs_x : epsilon
		| indexs
		;

indexs: indexs index
		| index
		;

index: '[' expr ']'
	 ;


type : INT
	  | DOUBLE
	  | CHAR
	  | BOOL
	  ;

type_void : INT
		  | DOUBLE
		  | CHAR
		  | BOOL
		  | VOID
		  ;

literal: CHAR_LIT
	   | INT_LIT
	   | DOUBLE_LIT
	   | BOOL_LIT
	   | STRING_LIT
	   ;
